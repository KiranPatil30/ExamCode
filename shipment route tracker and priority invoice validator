import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int n = Integer.parseInt(sc.nextLine());
        String[] cities = sc.nextLine().split(" ");
        int m = Integer.parseInt(sc.nextLine());
        String[] invoices = sc.nextLine().split(" ");

        // Longest non-repeating route using sliding window
        Map<String, Integer> map = new HashMap<>();
        int l = 0, max = 0, start = 0;
        for (int r = 0; r < n; r++) {
            if (map.containsKey(cities[r]) && map.get(cities[r]) >= l)
                l = map.get(cities[r]) + 1;
            map.put(cities[r], r);
            if (r - l + 1 > max) {
                max = r - l + 1;
                start = l;
            }
        }

        List<String> route = Arrays.asList(Arrays.copyOfRange(cities, start, start + max));

        // Count vowels in route
        int vowels = 0;
        for (String s : route)
            for (char c : s.toLowerCase().toCharArray())
                if ("aeiou".indexOf(c) >= 0) vowels++;

        // Validate priority invoices
        List<String> valid = new ArrayList<>();
        for (String s : invoices) {
            int id = Integer.parseInt(s), sum = 0, x = id;
            while (x > 0) { sum += x % 10; x /= 10; }
            if (isPrime(sum) || (vowels != 0 && id % vowels == 0))
                valid.add(s);
        }

        // Output
        System.out.println("Most efficient delivery route: " + String.join(" ", route));
        System.out.println("Valid priority invoices: " + String.join(" ", valid));
    }

    static boolean isPrime(int n) {
        if (n <= 1) return false;
        for (int i = 2; i * i <= n; i++)
            if (n % i == 0) return false;
        return true;
    }
}
