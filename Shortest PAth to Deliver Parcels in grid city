Input:
5
5
S...#
.#.#.
.#D#.
.#...
..#D.

Output:
4

import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Reading grid size
        int n = sc.nextInt();
        int m = sc.nextInt();
        sc.nextLine(); // consume newline

        char[][] grid = new char[n][m];
        boolean[][] visited = new boolean[n][m];

        int startRow = -1, startCol = -1;

        // Reading grid and finding 'S' position
        for (int i = 0; i < n; i++) {
            String line = sc.nextLine();
            for (int j = 0; j < m; j++) {
                grid[i][j] = line.charAt(j);
                if (grid[i][j] == 'S') {
                    startRow = i;
                    startCol = j;
                }
            }
        }

        // Directions: up, down, left, right
        int[] dx = {-1, 1, 0, 0};
        int[] dy = {0, 0, -1, 1};

        // BFS queue storing row, col, and distance
        Queue<int[]> queue = new LinkedList<>();
        queue.add(new int[]{startRow, startCol, 0});
        visited[startRow][startCol] = true;

        int result = -1;

        while (!queue.isEmpty()) {
            int[] current = queue.poll();
            int x = current[0], y = current[1], dist = current[2];

            // If we reach 'D'
            if (grid[x][y] == 'D') {
                result = dist;
                break;
            }

            // Exploring neighbours
            for (int i = 0; i < 4; i++) {
                int newX = x + dx[i];
                int newY = y + dy[i];

                if (newX >= 0 && newX < n && newY >= 0 && newY < m &&
                    !visited[newX][newY] && grid[newX][newY] != '#') {
                    visited[newX][newY] = true;
                    queue.add(new int[]{newX, newY, dist + 1});
                }
            }
        }

        System.out.println(result);
    }
}
