import java.util.*;

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String[] input = sc.nextLine().split(",");
        int[] profits = new int[input.length];
        for (int i = 0; i < input.length; i++) {
            profits[i] = Integer.parseInt(input[i].trim());
        }

        int maxProfit = getMaxNonAdjacentProfit(profits);
        int longestConsecutive = getLongestConsecutiveSequence(profits);
        int bonus = (maxProfit * (maxProfit % longestConsecutive)) / longestConsecutive;
        int finalReward = maxProfit + bonus;

        System.out.println("Maximum Profit from Non-Adjacent Months: " + maxProfit);
        System.out.println("Bonus from Longest Consecutive Sequence: " + bonus);
        System.out.println("Final Reward: " + finalReward);
    }

    // Max profit from non-adjacent months (House Robber)
    private static int getMaxNonAdjacentProfit(int[] arr) {
        int n = arr.length;
        if (n == 0) return 0;
        if (n == 1) return arr[0];

        int[] dp = new int[n];
        dp[0] = arr[0];
        dp[1] = Math.max(arr[0], arr[1]);

        for (int i = 2; i < n; i++) {
            dp[i] = Math.max(dp[i - 1], dp[i - 2] + arr[i]);
        }

        return dp[n - 1];
    }

    // Longest Consecutive Sequence (not necessarily adjacent or sorted)
    private static int getLongestConsecutiveSequence(int[] nums) {
        Set<Integer> set = new HashSet<>();
        for (int num : nums) set.add(num);

        int maxLen = 0;
        for (int num : set) {
            if (!set.contains(num - 1)) {  // start of sequence
                int current = num;
                int length = 1;
                while (set.contains(current + 1)) {
                    current++;
                    length++;
                }
                maxLen = Math.max(maxLen, length);
            }
        }

        return maxLen;
    }
}
