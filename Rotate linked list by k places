input:
5
1
2
3
4
5
2

output:
4 -> 5 -> 1 -> 2 -> 3

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // Read the number of nodes
        int n = scanner.nextInt();
        
        // Read the linked list values
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;
        for (int i = 0; i < n; i++) {
            int val = scanner.nextInt();
            current.next = new ListNode(val);
            current = current.next;
        }
        ListNode head = dummy.next;
        
        // Read k
        int k = scanner.nextInt();
        
        // Rotate the list
        ListNode rotated = rotateList(head, k);
        
        // Print the rotated list
        printList(rotated);
    }
    
    public static ListNode rotateList(ListNode head, int k) {
        if (head == null || head.next == null || k == 0) {
            return head;
        }
        
        // Calculate the length of the list and find the tail
        int length = 1;
        ListNode tail = head;
        while (tail.next != null) {
            tail = tail.next;
            length++;
        }
        
        // Calculate effective rotations
        k = k % length;
        if (k == 0) {
            return head;
        }
        
        // Find the new tail (length - k - 1 steps from head)
        ListNode newTail = head;
        for (int i = 0; i < length - k - 1; i++) {
            newTail = newTail.next;
        }
        
        // The new head is the node after newTail
        ListNode newHead = newTail.next;
        
        // Perform rotation
        newTail.next = null;
        tail.next = head;
        
        return newHead;
    }
    
    public static void printList(ListNode head) {
        if (head == null) {
            System.out.println("[]");
            return;
        }
        
        StringBuilder sb = new StringBuilder();
        
        ListNode current = head;
        while (current != null) {
            sb.append(current.val);
            if (current.next != null) {
                sb.append(" â†’ ");
            }
            current = current.next;
        }
       
        System.out.println(sb.toString());
    }
}

class ListNode {
    int val;
    ListNode next;

    ListNode(int val) {
        this.val = val;
    }
}
